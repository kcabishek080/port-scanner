import socket
import tkinter as tk
from tkinter import ttk, messagebox
import threading
import argparse
import unittest
from typing import List, Tuple, Dict
import sys

class PortScanner:
    def __init__(self):
        self.timeout = 1
        self.common_services = {
            20: "FTP-DATA",
            21: "FTP",
            22: "SSH",
            23: "Telnet",
            25: "SMTP",
            53: "DNS",
            80: "HTTP",
            110: "POP3",
            143: "IMAP",
            443: "HTTPS",
            445: "SMB",
            3306: "MySQL",
            3389: "RDP",
            5432: "PostgreSQL",
            8080: "HTTP-Proxy",
            27017: "MongoDB"
        }
        
    def detect_service(self, host: str, port: int) -> str:
        """Attempt to detect the service running on a port."""
        # First check if it's a known port
        if port in self.common_services:
            return self.common_services[port]
            
        # Try to get banner
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(2)
                s.connect((host, port))
                
                # Send common protocol queries
                queries = {
                    b"HEAD / HTTP/1.0\r\n\r\n": "HTTP",
                    b"": "Banner-only"
                }
                
                for query, protocol in queries.items():
                    try:
                        if query:
                            s.send(query)
                        banner = s.recv(1024).decode('utf-8', errors='ignore').strip()
                        
                        # Check banner for common signatures
                        if "SSH" in banner:
                            return "SSH"
                        elif "HTTP" in banner:
                            return "HTTP"
                        elif "SMTP" in banner:
                            return "SMTP"
                        elif "FTP" in banner:
                            return "FTP"
                        elif banner:
                            return f"Unknown ({banner[:30]}...)" if len(banner) > 30 else f"Unknown ({banner})"
                    except socket.error:
                        continue
                        
        except socket.error:
            pass
            
        return "Unknown"

    def scan_port(self, host: str, port: int) -> Tuple[bool, str]:
        """Scan a single port on the specified host and detect service."""
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(self.timeout)
                result = s.connect_ex((host, port))
                if result == 0:
                    service = self.detect_service(host, port)
                    return True, service
                return False, ""
        except socket.gaierror:
            print(f"Hostname {host} could not be resolved")
            return False, ""
        except socket.error:
            print(f"Couldn't connect to server {host}")
            return False, ""

    def scan_range(self, host: str, start_port: int, end_port: int) -> List[Tuple[int, str]]:
        """Scan a range of ports and return list of open ports with their services."""
        open_ports = []
        for port in range(start_port, end_port + 1):
            is_open, service = self.scan_port(host, port)
            if is_open:
                open_ports.append((port, service))
        return open_ports

class GUI:
    def __init__(self):
        self.scanner = PortScanner()
        self.root = tk.Tk()
        self.root.title("Port Scanner")
        self.setup_gui()

    def setup_gui(self):
        """Setup the GUI elements."""
        # Host input
        tk.Label(self.root, text="Host:").grid(row=0, column=0, padx=5, pady=5)
        self.host_entry = tk.Entry(self.root)
        self.host_entry.grid(row=0, column=1, columnspan=2, padx=5, pady=5)
        
        # Port range inputs
        tk.Label(self.root, text="Start Port:").grid(row=1, column=0, padx=5, pady=5)
        self.start_port = tk.Entry(self.root)
        self.start_port.grid(row=1, column=1, padx=5, pady=5)
        
        tk.Label(self.root, text="End Port:").grid(row=1, column=2, padx=5, pady=5)
        self.end_port = tk.Entry(self.root)
        self.end_port.grid(row=1, column=3, padx=5, pady=5)
        
        # Scan button
        self.scan_button = tk.Button(self.root, text="Scan", command=self.start_scan)
        self.scan_button.grid(row=2, column=0, columnspan=4, pady=10)
        
        # Results area
        self.results = ttk.Treeview(self.root, columns=("Port", "Status", "Service"), show="headings")
        self.results.heading("Port", text="Port")
        self.results.heading("Status", text="Status")
        self.results.heading("Service", text="Service")
        self.results.grid(row=3, column=0, columnspan=4, padx=5, pady=5)

    def start_scan(self):
        """Start the scanning process in a separate thread."""
        try:
            host = self.host_entry.get()
            start = int(self.start_port.get())
            end = int(self.end_port.get())
            
            self.scan_button.config(state='disabled')
            self.results.delete(*self.results.get_children())
            
            thread = threading.Thread(target=self.run_scan, args=(host, start, end))
            thread.start()
        except ValueError:
            messagebox.showerror("Error", "Please enter valid port numbers")

    def run_scan(self, host: str, start_port: int, end_port: int):
        """Run the scan and update results."""
        open_ports = self.scanner.scan_range(host, start_port, end_port)
        
        for port, service in open_ports:
            self.results.insert("", "end", values=(port, "Open", service))
            
        if not open_ports:
            self.results.insert("", "end", values=("N/A", "No open ports found", "N/A"))
            
        self.scan_button.config(state='normal')

def menu_interface():
    """Text-based menu interface."""
    scanner = PortScanner()
    while True:
        print("\nPort Scanner Menu")
        print("1. Scan a single port")
        print("2. Scan a range of ports")
        print("3. Exit")
        
        choice = input("Enter your choice (1-3): ")
        
        if choice == '1':
            host = input("Enter host to scan: ")
            try:
                port = int(input("Enter port to scan: "))
                is_open, service = scanner.scan_port(host, port)
                if is_open:
                    print(f"Port {port} is open - Service: {service}")
                else:
                    print(f"Port {port} is closed")
            except ValueError:
                print("Please enter a valid port number")
                
        elif choice == '2':
            host = input("Enter host to scan: ")
            try:
                start_port = int(input("Enter start port: "))
                end_port = int(input("Enter end port: "))
                open_ports = scanner.scan_range(host, start_port, end_port)
                if open_ports:
                    print("\nOpen ports:")
                    for port, service in open_ports:
                        print(f"Port {port} - Service: {service}")
                else:
                    print("No open ports found")
            except ValueError:
                print("Please enter valid port numbers")
                
        elif choice == '3':
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

def cli_interface():
    """Command-line interface."""
    parser = argparse.ArgumentParser(description='Port Scanner')
    parser.add_argument('host', help='Host to scan')
    parser.add_argument('-p', '--port', type=int, help='Single port to scan')
    parser.add_argument('-s', '--start', type=int, help='Start port for range scan')
    parser.add_argument('-e', '--end', type=int, help='End port for range scan')
    
    args = parser.parse_args()
    scanner = PortScanner()
    
    if args.port:
        is_open, service = scanner.scan_port(args.host, args.port)
        if is_open:
            print(f"Port {args.port} is open - Service: {service}")
        else:
            print(f"Port {args.port} is closed")
    elif args.start and args.end:
        open_ports = scanner.scan_range(args.host, args.start, args.end)
        if open_ports:
            print("\nOpen ports:")
            for port, service in open_ports:
                print(f"Port {port} - Service: {service}")
        else:
            print("No open ports found")
    else:
        parser.print_help()

class TestPortScanner(unittest.TestCase):
    def setUp(self):
        self.scanner = PortScanner()
        # Create a test server
        self.test_port = 12345
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server_socket.bind(('localhost', self.test_port))
        self.server_socket.listen(1)
        
    def tearDown(self):
        self.server_socket.close()
        
    def test_scan_open_port(self):
        """Test scanning an open port."""
        is_open, _ = self.scanner.scan_port('localhost', self.test_port)
        self.assertTrue(is_open)
        
    def test_scan_closed_port(self):
        """Test scanning a closed port."""
        is_open, _ = self.scanner.scan_port('localhost', self.test_port + 1)
        self.assertFalse(is_open)
        
    def test_scan_range(self):
        """Test scanning a range of ports."""
        open_ports = self.scanner.scan_range('localhost', self.test_port, self.test_port + 2)
        self.assertEqual(len(open_ports), 1)
        self.assertEqual(open_ports[0][0], self.test_port)

def main():
    if len(sys.argv) > 1:
        cli_interface()
    else:
        print("\nPort Scanner")
        print("1. GUI")
        print("2. CLI")
        print("3. Run Tests")
        
        choice = input("Enter your choice (1-3): ")
        
        if choice == '1':
            gui = GUI()
            gui.root.mainloop()
        elif choice == '2':
            menu_interface()
        elif choice == '3':
            unittest.main(argv=[''])
        else:
            print("Invalid choice")

if __name__ == "__main__":
    main()
